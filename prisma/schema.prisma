// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cv        CV?
}

model CV {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  personalInfo Json
  education    Education[]
  skills       Skill[]
  experience   WorkExperience[]
  projects     Project[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  cvId        String
  cv          CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  institution String
  degree      String
  field       String
  gpa         String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  cvId      String
  cv        CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  category  String
  items     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkExperience {
  id              String   @id @default(cuid())
  cvId            String
  cv              CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  title           String
  company         String
  location        String?
  startDate       DateTime
  endDate         DateTime?
  responsibilities String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  cvId        String
  cv          CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  title       String
  link        String?
  startDate   DateTime
  endDate     DateTime?
  description String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}